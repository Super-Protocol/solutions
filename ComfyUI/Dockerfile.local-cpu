# syntax = docker/dockerfile:1.4.0
# Use a Python image with uv pre-installed
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim

ENV DEBIAN_FRONTEND=noninteractive
# Prefer binary wheels over source distributions for faster pip installations
ENV PIP_PREFER_BINARY=1
ENV PIP_ROOT_USER_ACTION=ignore
# Ensures output from python is printed immediately to the terminal without buffering
ENV PYTHONUNBUFFERED=1 
# Speed up some cmake builds
ENV CMAKE_BUILD_PARALLEL_LEVEL=8

# The installer requires curl (and certificates) to download the release archive
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    git-lfs \
    build-essential \
    libgl1-mesa-glx \
    wget \
    curl \
    unzip \
    ffmpeg

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy

# Set environment variables
ARG COMFYUI_VERSION=0.3.10
ARG COMFYUI_MANAGER_VERSION=3.6.5
ARG COMFYUI_PATH=/opt/ComfyUI

RUN git config --global user.email "container@super-protocol.com" \
    && git config --global user.name "Container Builder" \
    && git config --global init.defaultBranch main \
    && git config --global core.editor "nano" \
    && git config --global --add safe.directory ${COMFYUI_PATH} \
    && git config --global --add safe.directory ${COMFYUI_PATH}/custom_nodes/ComfyUI-Manager

# Installing ComfyUI CLI
# see https://docs.comfy.org/comfy-cli/getting-started
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --system comfy-cli
RUN comfy --version
RUN comfy --skip-prompt tracking disable

# Installing ComfyUI
RUN --mount=type=cache,target=/root/.cache/uv \
    comfy --skip-prompt --workspace $COMFYUI_PATH install --version $COMFYUI_VERSION --manager-commit $COMFYUI_MANAGER_VERSION --cpu --fast-deps

RUN comfy --skip-prompt set-default ${COMFYUI_PATH}

# Change into ComfyUI directory
WORKDIR ${COMFYUI_PATH}

# Clones the ComfyUI Manager repository and checks out the latest release
# edit gitignore entries
RUN for l in custom_nodes user models web web_custom_versions; do sed -i "/$l/d" .gitignore ; done
# add more gitignore entries
RUN <<EOF cat >> .gitignore
custom_nodes/ComfyUI-Manager/
.github/
user/*.log
user/default/ComfyUI-Manager/cache/
user/default/ComfyUI-Manager/channels.list
EOF

RUN comfy node simple-show installed

# Creating ComfyUI Manager config file
RUN mkdir -p user/default/ComfyUI-Manager
RUN <<EOF cat >> user/default/ComfyUI-Manager/config.ini
[default]
file_logging = False
security_level = weak
EOF

# create changeset saving script
RUN mkdir changeset
RUN <<EOF cat >> save-changeset.sh
#!/bin/bash
set -e
if [ -f ${COMFYUI_PATH}/user/default/workflows/\$1.json ]; then
    comfy node install-deps --workflow user/default/workflows/\$1.json
else
    echo "Workflow ${COMFYUI_PATH}/user/default/workflows/\$1.json not found"
    ls -la ${COMFYUI_PATH}/user/default/workflows/
fi
comfy node fix all
find . -mindepth 2 -type d -name ".git" -exec rm -rf {} +
find . -mindepth 2 -type f -name ".gitignore" -exec rm -f {} +
git add --all
git commit -m 'All changes'
git diff --diff-filter=d --submodule=diff --name-only HEAD^ \
  | tar -czf changeset/\${1:-snapshot}.tar.gz -T -
EOF
RUN chmod +x save-changeset.sh
RUN echo "save-changeset.sh" >> .gitignore
RUN echo "changeset/" >> .gitignore

# commit current state so we can trace changes
RUN git add . \
    && git commit -m "chore: initial setup" \
    && git checkout -b container/dev \
    && git tag -a start -m "start"

# Expose the port the ComfyUI runs on
EXPOSE 8188

# Add a healthcheck to ensure the service is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8188/ || exit 1

CMD ["comfy", "launch", "--", "--listen", "*", "--port", "8188", "--disable-auto-launch", "--cpu", "--cpu-vae"]
