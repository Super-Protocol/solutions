import fs from 'fs';
import QuoteParser from '../src/services/quoteParser.service';

describe('Quote parser service', () => {
  const quoteBuffer = fs.readFileSync('./test/quote.dat');
  const parser = new QuoteParser(quoteBuffer);

  it('parse quote', () => {
    const quote = parser.parseQuote();
    expect(quote).toBeDefined;
    expect(
      Buffer.compare(
        quote.attestationKey,
        new Uint8Array([
          241, 183, 64, 213, 150, 2, 234, 165, 202, 123, 227, 216, 47, 159, 118, 76, 137, 75, 53,
          58, 28, 142, 31, 61, 104, 220, 7, 156, 253, 118, 76, 171, 44, 128, 224, 88, 113, 244, 72,
          100, 125, 96, 168, 61, 43, 156, 9, 39, 2, 159, 189, 177, 161, 207, 198, 161, 185, 199,
          120, 121, 49, 95, 58, 192,
        ]),
      ),
    ).toEqual(0);
    expect(
      Buffer.compare(
        quote.header,
        new Uint8Array([
          3, 0, 2, 0, 0, 0, 0, 0, 9, 0, 13, 0, 147, 154, 114, 51, 247, 156, 76, 169, 148, 10, 13,
          179, 149, 127, 6, 7, 234, 200, 96, 68, 87, 196, 94, 173, 98, 155, 135, 246, 119, 81, 39,
          4, 0, 0, 0, 0,
        ]),
      ),
    ).toEqual(0);
    expect(
      Buffer.compare(
        quote.isvReport,
        new Uint8Array([
          5, 9, 8, 9, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 231, 0,
          0, 0, 0, 0, 0, 0, 30, 35, 97, 174, 219, 148, 187, 7, 189, 192, 96, 253, 88, 44, 121, 171,
          211, 136, 64, 55, 242, 107, 247, 66, 167, 191, 6, 156, 170, 245, 60, 199, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 57,
          152, 204, 234, 33, 62, 213, 132, 196, 103, 15, 184, 202, 125, 106, 91, 163, 36, 30, 158,
          179, 44, 40, 130, 213, 157, 40, 14, 88, 66, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
      ),
    ).toEqual(0);
    expect(
      Buffer.compare(
        quote.isvReportSignature,
        new Uint8Array([
          98, 117, 138, 186, 125, 93, 130, 78, 49, 162, 111, 198, 73, 152, 129, 81, 149, 113, 65,
          120, 17, 237, 196, 162, 80, 103, 199, 6, 59, 213, 22, 18, 156, 221, 80, 150, 119, 188,
          106, 83, 215, 164, 109, 54, 11, 20, 247, 140, 208, 138, 246, 49, 185, 191, 85, 50, 211,
          184, 221, 20, 80, 53, 119, 20,
        ]),
      ),
    ).toEqual(0);
    expect(
      Buffer.compare(
        quote.qeAuthenticationData,
        new Uint8Array([
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
          25, 26, 27, 28, 29, 30, 31,
        ]),
      ),
    ).toEqual(0);
    expect(
      Buffer.compare(
        quote.qeReport,
        new Uint8Array([
          5, 9, 8, 9, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 231, 0,
          0, 0, 0, 0, 0, 0, 206, 29, 168, 154, 193, 245, 74, 128, 114, 87, 196, 229, 124, 120, 20,
          12, 188, 102, 82, 212, 213, 135, 214, 15, 5, 131, 18, 90, 39, 146, 190, 112, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
          79, 87, 117, 215, 150, 80, 62, 150, 19, 127, 119, 198, 138, 130, 154, 0, 86, 172, 141,
          237, 112, 20, 11, 8, 27, 9, 68, 144, 197, 123, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 46,
          156, 54, 84, 157, 243, 248, 62, 244, 247, 170, 2, 94, 123, 156, 88, 15, 64, 217, 240, 200,
          28, 61, 107, 45, 27, 215, 171, 234, 161, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]),
      ),
    ).toEqual(0);
    expect(
      Buffer.compare(
        quote.qeReportSignature,
        new Uint8Array([
          6, 62, 142, 9, 203, 250, 160, 94, 103, 40, 127, 170, 124, 168, 83, 149, 235, 213, 131, 35,
          39, 99, 140, 16, 214, 31, 114, 250, 186, 91, 97, 161, 205, 1, 27, 56, 166, 176, 51, 145,
          234, 240, 17, 166, 38, 160, 47, 145, 193, 1, 165, 146, 210, 223, 91, 209, 66, 126, 137,
          220, 217, 88, 68, 230,
        ]),
      ),
    ).toEqual(0);
  });

  it('parse certificates', () => {
    const certs = parser.parseCerts();
    expect(certs).toBeDefined;
    expect(certs.length).toEqual(3);
    expect(certs[0]).toEqual({
      bodyPartOne:
        '0x30820498a003020102021405aa3055238c402ad51ab0092a67b34dc22bc115300a06082a8648ce3d04030230703122302006035504030c19496e74656c205347582050434b20506c6174666f726d204341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b3009060355040613025553301e170d3232313131393138353734325a170d3239313131393138353734325a30703122302006035504030c19496e74656c205347582050434b204365727469666963617465311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b30090603550406130255533059301306072a8648ce3d020106082a8648ce3d03010703420004',
      publicKey:
        '0xdcaf71062d8e38d093b3fc621e22d681e3d5915e84e0c3f8231500f6939bb65e7e48479ca7d55ba33d649724a066fe3cef3e49aef122c46b438f049b7b0cbf05',
      bodyPartTwo:
        '0xa382030e3082030a301f0603551d23041830168014956f5dcdbd1be1e94049c9d4f433ce01570bde54306b0603551d1f046430623060a05ea05c865a68747470733a2f2f6170692e7472757374656473657276696365732e696e74656c2e636f6d2f7367782f63657274696669636174696f6e2f76332f70636b63726c3f63613d706c6174666f726d26656e636f64696e673d646572301d0603551d0e041604142d53c53cf6a1cc2a284c9eef0077a9a469a8e8e6300e0603551d0f0101ff0404030206c0300c0603551d130101ff040230003082023b06092a864886f84d010d010482022c30820228301e060a2a864886f84d010d01010410ffc09e459b46112362c0c7e1266c699b30820165060a2a864886f84d010d0102308201553010060b2a864886f84d010d0102010201043010060b2a864886f84d010d0102020201043010060b2a864886f84d010d0102030201033010060b2a864886f84d010d0102040201033011060b2a864886f84d010d010205020200ff3011060b2a864886f84d010d010206020200ff3010060b2a864886f84d010d0102070201003010060b2a864886f84d010d0102080201003010060b2a864886f84d010d0102090201003010060b2a864886f84d010d01020a0201003010060b2a864886f84d010d01020b0201003010060b2a864886f84d010d01020c0201003010060b2a864886f84d010d01020d0201003010060b2a864886f84d010d01020e0201003010060b2a864886f84d010d01020f0201003010060b2a864886f84d010d0102100201003010060b2a864886f84d010d01021102010b301f060b2a864886f84d010d010212041004040303ffff000000000000000000003010060a2a864886f84d010d0103040200003014060a2a864886f84d010d0104040630606a000000300f060a2a864886f84d010d01050a0101301e060a2a864886f84d010d010604106ac366d2394a46f68a4bb2d8c877ad663044060a2a864886f84d010d010730363010060b2a864886f84d010d0107010101ff3010060b2a864886f84d010d0107020101ff3010060b2a864886f84d010d0107030101ff',
      signature:
        '0xb0daedae570c41aaaa03e7a0feea5a44918ab431a1d66c65e15208e06b9d0b8d5595490a5f0998e7f7afc3220d184f71be81383ec7eb696903d95affec096910',
    });
    expect(certs[1]).toEqual({
      bodyPartOne:
        '0x3082023da003020102021500956f5dcdbd1be1e94049c9d4f433ce01570bde54300a06082a8648ce3d0403023068311a301806035504030c11496e74656c2053475820526f6f74204341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b3009060355040613025553301e170d3138303532313130353031305a170d3333303532313130353031305a30703122302006035504030c19496e74656c205347582050434b20506c6174666f726d204341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b30090603550406130255533059301306072a8648ce3d020106082a8648ce3d03010703420004',
      publicKey:
        '0x35207feeddb595748ed82bb3a71c3be1e241ef61320c6816e6b5c2b71dad5532eaea12a4eb3f948916429ea47ba6c3af82a15e4b19664e52657939a2d96633de',
      bodyPartTwo:
        '0xa381bb3081b8301f0603551d2304183016801422650cd65a9d3489f383b49552bf501b392706ac30520603551d1f044b30493047a045a043864168747470733a2f2f6365727469666963617465732e7472757374656473657276696365732e696e74656c2e636f6d2f496e74656c534758526f6f7443412e646572301d0603551d0e04160414956f5dcdbd1be1e94049c9d4f433ce01570bde54300e0603551d0f0101ff04040302010630120603551d130101ff040830060101ff020100',
      signature:
        '0x5ec5648b4c3e8ba558196dd417fdb6b9a5ded182438f551e9c0f938c3d5a8b97261bd520260f9c647d3569be8e14a32892631ac358b994478088f4d2b27cf37e',
    });
    expect(certs[2]).toEqual({
      bodyPartOne:
        '0x30820234a003020102021422650cd65a9d3489f383b49552bf501b392706ac300a06082a8648ce3d0403023068311a301806035504030c11496e74656c2053475820526f6f74204341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b3009060355040613025553301e170d3138303532313130343531305a170d3439313233313233353935395a3068311a301806035504030c11496e74656c2053475820526f6f74204341311a3018060355040a0c11496e74656c20436f72706f726174696f6e3114301206035504070c0b53616e746120436c617261310b300906035504080c024341310b30090603550406130255533059301306072a8648ce3d020106082a8648ce3d03010703420004',
      publicKey:
        '0x0ba9c4c0c0c86193a3fe23d6b02cda10a8bbd4e88e48b4458561a36e705525f567918e2edc88e40d860bd0cc4ee26aacc988e505a953558c453f6b0904ae7394',
      bodyPartTwo:
        '0xa381bb3081b8301f0603551d2304183016801422650cd65a9d3489f383b49552bf501b392706ac30520603551d1f044b30493047a045a043864168747470733a2f2f6365727469666963617465732e7472757374656473657276696365732e696e74656c2e636f6d2f496e74656c534758526f6f7443412e646572301d0603551d0e0416041422650cd65a9d3489f383b49552bf501b392706ac300e0603551d0f0101ff04040302010630120603551d130101ff040830060101ff020101',
      signature:
        '0xe5bfe50911f92f428920dc368a302ee3d12ec5867ff622ec6497f78060c13c20e09d25ac7a0cb3e5e8e68fec5fa3bd416c47440bd950639d450edcbea4576aa2',
    });
  });
});
